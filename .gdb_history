si
s
print pid
s
print fd
s
print *pipes[idx]
s
print c
print *pipes[idx]
s
print *pipes[idx]
s
print *pipes[idx]
s
print c
s
print *c
s
print c
exit
continue
b scheduler
c
print processes
exit
b exitProcess
continue
s
s
s
print processes[2]
print *blockedQueue
print *processes[2].blockedQueue
print *((*processes[2].blockedQueue).head)
s
print curren
print current
print *current
s
print current->pid
s
print processes
s
s
print currentProcess
exit
b sys_killProcess
continue
asm-prof
si
src-prof
s
print pid
continue
asm-prof
print rdi
c
c
c
b kill
continue
src-prof
print cmdtokens[1]
s
n
exit
break phylo
continue
exit
b lol
continue
s
print argv
si
asm-prof
si
b phylo
si
src-prof
s
n
print argv
print argv[0]
print argv[1]
print argc
print fn
s
n
print pif
print pid
n
b scheduler
n
s
print currentProcess
s
asm-prof
si
si
continue
exit
b lol
continue
s
si
s
print argv[0]
s
b scheduler
continue
s
print currentProcess
s
asm-prof
si
exit
b phylo
continue
s
n
print philosophersAmount
s
n
print name
n
print aux
print idx
exit
b phylo
continue
s
n
s
n
n
print argv
n
print philos[idx].pid
n
print argView
print argvView
n
s
b scheduler
continue
s
print currentProcess
c
print processes
s
print currentProcess
s
s
n
print i
print argv
print argv[1]
print argv[1][0]
s
si
s
continue
s
print argc
print argv
print argv[0]
print argv[1]
exit
b phylo
continue
n
s
n
si
s
print argv
print argv[0]
print argv[1]
n
s
n
si
s
print argv
print argv[0]
print argv[1]
s
s
n
s
n
n
s
print argv
print argv[0]
print argv[1]
si
s
n
n
s
n
s
s
n
si
s
print argv[0]
print argv[1]
s
print argv[0]
print argv[1]
n
s
si
asm-prof
s
s
src-prof
n
exit
b phylo
continue
\n
n
s
si
s
n
s
si
asm-prof
si
src-prof
b scheduler
continue
print processes
s
print currentProcess
c
s
print currentProcess
c
s
s
asm-prof
si
si
src-prof
s
print argc
print argv
print argv[0]
print argv[1]
exit
