s
n
print c
print buffer[pipes[idx]]
print pipes[idx]->buffer
n
print c
print *c
n
s
s
print c
s
s
n
print c
exit
c
exit
c
exit
b lol
c
c
s
exit
b filter
c
exit
b filter
c
s
n
exit
b wc
b filter
c
s
print c
s
print c
s
s
b scheduler
c
s
c
s
print processes
s
s
s
s
s
print processes
s
s
print processes
s
print currentProcess
c
s
si
s
n
s
s
s
n
n
s
s
n
print pipes[idx]->buffer[(pipes[idx]->readingIdx + pipes[idx]->toBeRead) % MAX_BUFFER] 
print pipes[idx]->buffer[(pipes[idx]->readingIdx + pipes[idx]->toBeRead) % 256] 
n
n
n
c
print processes
b exitProcess
c
remove 1
disable 1
c
disable 3
c
print pid
s
n
b scheduler
s
n
print processes
exit 
b filter
c
b exitProcess
c
b scheduler
s
n
s
s
asm-prof
si
src-prof
s
n
s
s
n
s
s
s
n
s
n
n
print c
s
n
n
pn
n
n
n
n
print processes
c
c
s
n
n
c
print pid
s
n
print processes
clear
exit
b lol
c
exit
b exitProcess
b killProcess
break sys_killProcess
c
exit
b exitProcess
b lol
c
n
print pid
n
s
s
s
s
si
s
print pid
n
n
s
print pipeId
s
si
n
s
si
s
print pid
s
print pid
print processes[pid].fileDescriptors[1]
exit
b pipe_handler
c
n
print pipes
print pipes[0]
print pipes[1]
clear
exit
b pipe_hanlder
b pipe_handler
c
n
print pipes [i]
s
c
s
s
si
s
print name
s
n
print i
print firstFree
n
n
print firstFree
print firstFree + 3
n
s
asm-prof
src-prof
s
asm-prof
src-prof
s
asm-prof
si
asm-prof
src-prof
src-prof
asm-prof
src-prof
s
print pipes[i]
print pipes[0]
exit
b pipe_handler
c
n
pipes[i]
print pipes
print pipes[0]
exit
b pipe_handler
c
n
exit
b pipe_handler
c
exit 
b pipe_handler
c
n
exit
b pipe_handler
c
n
print name
si
s
s
s
s
n
print i
print name
print pipes[i]->name
exit
