exit
b exitProcess
b killProcess
break sys_killProcess
c
exit
b exitProcess
b lol
c
n
print pid
n
s
s
s
s
si
s
print pid
n
n
s
print pipeId
s
si
n
s
si
s
print pid
s
print pid
print processes[pid].fileDescriptors[1]
exit
b pipe_handler
c
n
print pipes
print pipes[0]
print pipes[1]
clear
exit
b pipe_hanlder
b pipe_handler
c
n
print pipes [i]
s
c
s
s
si
s
print name
s
n
print i
print firstFree
n
n
print firstFree
print firstFree + 3
n
s
asm-prof
src-prof
s
asm-prof
src-prof
s
asm-prof
si
asm-prof
src-prof
src-prof
asm-prof
src-prof
s
print pipes[i]
print pipes[0]
exit
b pipe_handler
c
n
pipes[i]
print pipes
print pipes[0]
exit
b pipe_handler
c
n
exit
b pipe_handler
c
exit 
b pipe_handler
c
n
exit
b pipe_handler
c
n
print name
si
s
s
s
s
n
print i
print name
print pipes[i]->name
exit
b phylo
c
exit
b phylo
c
n
si
n
s
n
n
print pid
print processes[pid].isBackground
b createProcess
c
n
print pid
print processes[pid].isBackground
print argv[0]
c
n
print argv[0]
print processes[pid].isBackground
c
n
print argv[0]
print processes[pid].isBackground
print pid
n
print processes[pid].isBackground
c
n
print processes[pid].isBackground
print pid
print argv[0]
c
n
b terminateForeground
n
print argv[0]
print pid
print processes[pid].isBackground

n
print argv[0]
print pid
print processes[pid].isBackground
c
print processes
s
n
exit
b testnosync
c
exit
b testnosync
c
n
s
n
print argv
print argv[1]
print argv[2]
print argv[3]
print argv[4]
n
s
exit
b testsync
c
n
s
n
n
n
n
n
c
n
s
n
n
c
exit
c
b testsync
c
n
s
b my_process_inc
n
print argv[3]
n
n
n
si
s
s
s
n
n
print sem
n
b sys_closeSem
c
b scheduler
c
exit
c
exit
b testnosync
c
n
s
print argv[2]
print argv[3]
print mi_process_inc
b mi_process_inc
b my_process_inc
n
c
print use_sem
n
c
exit
b testnosync
c
c
exit
c
b testsync
c
b my_process_inc
n
s
n
n
n
print pids
n
s
exoit
exit
